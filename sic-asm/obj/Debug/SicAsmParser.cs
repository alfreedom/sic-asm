//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\alfredo\Documents\Visual Studio 2015\Projects\sic-asm\sic-asm\SicAsm.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace sic_asm {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class SicAsmParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, INT=34, HEX=35, NEMONICO=36, CONSTCAD=37, CONSTHEX=38, 
		INDEXED=39, LABEL=40, NEWLINE=41, WS=42, INVALID=43;
	public const int
		RULE_program = 0, RULE_vacio = 1, RULE_start = 2, RULE_end = 3, RULE_instrs = 4, 
		RULE_prop = 5, RULE_inst = 6;
	public static readonly string[] ruleNames = {
		"program", "vacio", "start", "end", "instrs", "prop", "inst"
	};

	private static readonly string[] _LiteralNames = {
		null, "'START'", "'END'", "'ADD'", "'AND'", "'COMP'", "'DIV'", "'J'", 
		"'JEQ'", "'JGT'", "'JLT'", "'JSUB'", "'LDA'", "'LDCH'", "'LDL'", "'LDX'", 
		"'MUL'", "'OR'", "'RD'", "'STA'", "'STCH'", "'STL'", "'STSW'", "'STX'", 
		"'SUB'", "'TD'", "'TIX'", "'WD'", "'RSUB'", "'WORD'", "'BYTE'", "'RESB'", 
		"'RESW'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "INT", "HEX", 
		"NEMONICO", "CONSTCAD", "CONSTHEX", "INDEXED", "LABEL", "NEWLINE", "WS", 
		"INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SicAsm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF=Eof;

	public SicAsmParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoProgramaContext : ProgramContext {
		public StartContext start() {
			return GetRuleContext<StartContext>(0);
		}
		public InstrsContext instrs() {
			return GetRuleContext<InstrsContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SicAsmParser.Eof, 0); }
		public VacioContext vacio() {
			return GetRuleContext<VacioContext>(0);
		}
		public DoProgramaContext(ProgramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterDoPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitDoPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			_localctx = new DoProgramaContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			_la = _input.La(1);
			if (_la==NEWLINE) {
				{
				State = 14; vacio(0);
				}
			}

			State = 17; start();
			State = 18; instrs(0);
			State = 19; end();
			State = 20; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VacioContext : ParserRuleContext {
		public VacioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacio; } }
	 
		public VacioContext() { }
		public virtual void CopyFrom(VacioContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Vacio1Context : VacioContext {
		public VacioContext vacio() {
			return GetRuleContext<VacioContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public Vacio1Context(VacioContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterVacio1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitVacio1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVacio1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Vacio2Context : VacioContext {
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public Vacio2Context(VacioContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterVacio2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitVacio2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVacio2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VacioContext vacio() {
		return vacio(0);
	}

	private VacioContext vacio(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VacioContext _localctx = new VacioContext(_ctx, _parentState);
		VacioContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_vacio, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Vacio2Context(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 23; Match(NEWLINE);
			}
			_ctx.stop = _input.Lt(-1);
			State = 29;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Vacio1Context(new VacioContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_vacio);
					State = 25;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 26; Match(NEWLINE);
					}
					} 
				}
				State = 31;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
	 
		public StartContext() { }
		public virtual void CopyFrom(StartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DirectivaInicioContext : StartContext {
		public ITerminalNode LABEL() { return GetToken(SicAsmParser.LABEL, 0); }
		public ITerminalNode INT() { return GetToken(SicAsmParser.INT, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode HEX() { return GetToken(SicAsmParser.HEX, 0); }
		public DirectivaInicioContext(StartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterDirectivaInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitDirectivaInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivaInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_start);
		try {
			State = 40;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				_localctx = new DirectivaInicioContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 32; Match(LABEL);
				State = 33; Match(T__0);
				State = 34; Match(INT);
				State = 35; Match(NEWLINE);
				}
				break;

			case 2:
				_localctx = new DirectivaInicioContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 36; Match(LABEL);
				State = 37; Match(T__0);
				State = 38; Match(HEX);
				State = 39; Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
	 
		public EndContext() { }
		public virtual void CopyFrom(EndContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DirectivaFinContext : EndContext {
		public IToken num_type;
		public ITerminalNode[] LABEL() { return GetTokens(SicAsmParser.LABEL); }
		public ITerminalNode LABEL(int i) {
			return GetToken(SicAsmParser.LABEL, i);
		}
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode INT() { return GetToken(SicAsmParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(SicAsmParser.HEX, 0); }
		public DirectivaFinContext(EndContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterDirectivaFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitDirectivaFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivaFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_end);
		int _la;
		try {
			State = 52;
			switch (_input.La(1)) {
			case LABEL:
				_localctx = new DirectivaFinContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; Match(LABEL);
				State = 43; Match(T__1);
				State = 45;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) {
					{
					State = 44;
					((DirectivaFinContext)_localctx).num_type = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
						((DirectivaFinContext)_localctx).num_type = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
				}

				State = 47; Match(NEWLINE);
				}
				break;
			case T__1:
				_localctx = new DirectivaFinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; Match(T__1);
				State = 50;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) {
					{
					State = 49;
					((DirectivaFinContext)_localctx).num_type = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
						((DirectivaFinContext)_localctx).num_type = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrsContext : ParserRuleContext {
		public InstrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instrs; } }
	 
		public InstrsContext() { }
		public virtual void CopyFrom(InstrsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Instrucciones2Context : InstrsContext {
		public PropContext prop() {
			return GetRuleContext<PropContext>(0);
		}
		public Instrucciones2Context(InstrsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterInstrucciones2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitInstrucciones2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrucciones2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Instrucciones1Context : InstrsContext {
		public InstrsContext instrs() {
			return GetRuleContext<InstrsContext>(0);
		}
		public PropContext prop() {
			return GetRuleContext<PropContext>(0);
		}
		public Instrucciones1Context(InstrsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterInstrucciones1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitInstrucciones1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrucciones1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrsContext instrs() {
		return instrs(0);
	}

	private InstrsContext instrs(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		InstrsContext _localctx = new InstrsContext(_ctx, _parentState);
		InstrsContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_instrs, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Instrucciones2Context(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 55; prop();
			}
			_ctx.stop = _input.Lt(-1);
			State = 61;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Instrucciones1Context(new InstrsContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_instrs);
					State = 57;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 58; prop();
					}
					} 
				}
				State = 63;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PropContext : ParserRuleContext {
		public PropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop; } }
	 
		public PropContext() { }
		public virtual void CopyFrom(PropContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropInstruccionContext : PropContext {
		public InstContext inst() {
			return GetRuleContext<InstContext>(0);
		}
		public PropInstruccionContext(PropContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterPropInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitPropInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NuevaLineaContext : PropContext {
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public NuevaLineaContext(PropContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterNuevaLinea(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitNuevaLinea(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNuevaLinea(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropContext prop() {
		PropContext _localctx = new PropContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_prop);
		try {
			State = 66;
			switch (_input.La(1)) {
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case INT:
			case HEX:
			case CONSTCAD:
			case CONSTHEX:
			case LABEL:
			case INVALID:
				_localctx = new PropInstruccionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; inst();
				}
				break;
			case NEWLINE:
				_localctx = new NuevaLineaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstContext : ParserRuleContext {
		public InstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inst; } }
	 
		public InstContext() { }
		public virtual void CopyFrom(InstContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DirectivaContext : InstContext {
		public IToken directive;
		public IToken num_type;
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode INT() { return GetToken(SicAsmParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(SicAsmParser.HEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(SicAsmParser.CONSTCAD, 0); }
		public ITerminalNode CONSTHEX() { return GetToken(SicAsmParser.CONSTHEX, 0); }
		public DirectivaContext(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DirectivaInvalida1Context : InstContext {
		public ITerminalNode[] LABEL() { return GetTokens(SicAsmParser.LABEL); }
		public ITerminalNode LABEL(int i) {
			return GetToken(SicAsmParser.LABEL, i);
		}
		public ITerminalNode[] INT() { return GetTokens(SicAsmParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(SicAsmParser.INT, i);
		}
		public ITerminalNode[] HEX() { return GetTokens(SicAsmParser.HEX); }
		public ITerminalNode HEX(int i) {
			return GetToken(SicAsmParser.HEX, i);
		}
		public ITerminalNode[] CONSTCAD() { return GetTokens(SicAsmParser.CONSTCAD); }
		public ITerminalNode CONSTCAD(int i) {
			return GetToken(SicAsmParser.CONSTCAD, i);
		}
		public ITerminalNode[] CONSTHEX() { return GetTokens(SicAsmParser.CONSTHEX); }
		public ITerminalNode CONSTHEX(int i) {
			return GetToken(SicAsmParser.CONSTHEX, i);
		}
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode[] INVALID() { return GetTokens(SicAsmParser.INVALID); }
		public ITerminalNode INVALID(int i) {
			return GetToken(SicAsmParser.INVALID, i);
		}
		public DirectivaInvalida1Context(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterDirectivaInvalida1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitDirectivaInvalida1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivaInvalida1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstruccionIndexadaContext : InstContext {
		public IToken opcode;
		public IToken num_type;
		public ITerminalNode INDEXED() { return GetToken(SicAsmParser.INDEXED, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode INT() { return GetToken(SicAsmParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(SicAsmParser.HEX, 0); }
		public ITerminalNode LABEL() { return GetToken(SicAsmParser.LABEL, 0); }
		public InstruccionIndexadaContext(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterInstruccionIndexada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitInstruccionIndexada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccionIndexada(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DirectivaCompletaContext : InstContext {
		public IToken directive;
		public IToken num_type;
		public ITerminalNode LABEL() { return GetToken(SicAsmParser.LABEL, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode INT() { return GetToken(SicAsmParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(SicAsmParser.HEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(SicAsmParser.CONSTCAD, 0); }
		public ITerminalNode CONSTHEX() { return GetToken(SicAsmParser.CONSTHEX, 0); }
		public DirectivaCompletaContext(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterDirectivaCompleta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitDirectivaCompleta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivaCompleta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstruccionInvalida1Context : InstContext {
		public IToken num_type;
		public IToken num2_type;
		public IToken invalid;
		public IToken opcode;
		public ITerminalNode[] LABEL() { return GetTokens(SicAsmParser.LABEL); }
		public ITerminalNode LABEL(int i) {
			return GetToken(SicAsmParser.LABEL, i);
		}
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode[] INT() { return GetTokens(SicAsmParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(SicAsmParser.INT, i);
		}
		public ITerminalNode[] HEX() { return GetTokens(SicAsmParser.HEX); }
		public ITerminalNode HEX(int i) {
			return GetToken(SicAsmParser.HEX, i);
		}
		public ITerminalNode[] CONSTCAD() { return GetTokens(SicAsmParser.CONSTCAD); }
		public ITerminalNode CONSTCAD(int i) {
			return GetToken(SicAsmParser.CONSTCAD, i);
		}
		public ITerminalNode[] CONSTHEX() { return GetTokens(SicAsmParser.CONSTHEX); }
		public ITerminalNode CONSTHEX(int i) {
			return GetToken(SicAsmParser.CONSTHEX, i);
		}
		public ITerminalNode[] INVALID() { return GetTokens(SicAsmParser.INVALID); }
		public ITerminalNode INVALID(int i) {
			return GetToken(SicAsmParser.INVALID, i);
		}
		public ITerminalNode[] INDEXED() { return GetTokens(SicAsmParser.INDEXED); }
		public ITerminalNode INDEXED(int i) {
			return GetToken(SicAsmParser.INDEXED, i);
		}
		public InstruccionInvalida1Context(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterInstruccionInvalida1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitInstruccionInvalida1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccionInvalida1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstruccionContext : InstContext {
		public IToken opcode;
		public IToken num_type;
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode INT() { return GetToken(SicAsmParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(SicAsmParser.HEX, 0); }
		public ITerminalNode LABEL() { return GetToken(SicAsmParser.LABEL, 0); }
		public InstruccionContext(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstruccionRsubCompletaContext : InstContext {
		public ITerminalNode LABEL() { return GetToken(SicAsmParser.LABEL, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public InstruccionRsubCompletaContext(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterInstruccionRsubCompleta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitInstruccionRsubCompleta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccionRsubCompleta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstruccionIndexadaCompletaContext : InstContext {
		public IToken opcode;
		public IToken num_type;
		public ITerminalNode[] LABEL() { return GetTokens(SicAsmParser.LABEL); }
		public ITerminalNode LABEL(int i) {
			return GetToken(SicAsmParser.LABEL, i);
		}
		public ITerminalNode INDEXED() { return GetToken(SicAsmParser.INDEXED, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode INT() { return GetToken(SicAsmParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(SicAsmParser.HEX, 0); }
		public InstruccionIndexadaCompletaContext(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterInstruccionIndexadaCompleta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitInstruccionIndexadaCompleta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccionIndexadaCompleta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstruccionRsubContext : InstContext {
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public InstruccionRsubContext(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterInstruccionRsub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitInstruccionRsub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccionRsub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstruccionCompletaContext : InstContext {
		public IToken opcode;
		public IToken num_type;
		public ITerminalNode[] LABEL() { return GetTokens(SicAsmParser.LABEL); }
		public ITerminalNode LABEL(int i) {
			return GetToken(SicAsmParser.LABEL, i);
		}
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode INT() { return GetToken(SicAsmParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(SicAsmParser.HEX, 0); }
		public InstruccionCompletaContext(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterInstruccionCompleta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitInstruccionCompleta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccionCompleta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstruccionRsubInvalidaContext : InstContext {
		public ITerminalNode NEWLINE() { return GetToken(SicAsmParser.NEWLINE, 0); }
		public ITerminalNode[] INT() { return GetTokens(SicAsmParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(SicAsmParser.INT, i);
		}
		public ITerminalNode[] HEX() { return GetTokens(SicAsmParser.HEX); }
		public ITerminalNode HEX(int i) {
			return GetToken(SicAsmParser.HEX, i);
		}
		public ITerminalNode[] CONSTCAD() { return GetTokens(SicAsmParser.CONSTCAD); }
		public ITerminalNode CONSTCAD(int i) {
			return GetToken(SicAsmParser.CONSTCAD, i);
		}
		public ITerminalNode[] CONSTHEX() { return GetTokens(SicAsmParser.CONSTHEX); }
		public ITerminalNode CONSTHEX(int i) {
			return GetToken(SicAsmParser.CONSTHEX, i);
		}
		public ITerminalNode[] LABEL() { return GetTokens(SicAsmParser.LABEL); }
		public ITerminalNode LABEL(int i) {
			return GetToken(SicAsmParser.LABEL, i);
		}
		public ITerminalNode[] INVALID() { return GetTokens(SicAsmParser.INVALID); }
		public ITerminalNode INVALID(int i) {
			return GetToken(SicAsmParser.INVALID, i);
		}
		public InstruccionRsubInvalidaContext(InstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.EnterInstruccionRsubInvalida(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicAsmListener typedListener = listener as ISicAsmListener;
			if (typedListener != null) typedListener.ExitInstruccionRsubInvalida(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISicAsmVisitor<TResult> typedVisitor = visitor as ISicAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccionRsubInvalida(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstContext inst() {
		InstContext _localctx = new InstContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_inst);
		int _la;
		try {
			int _alt;
			State = 295;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				_localctx = new InstruccionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 68;
				((InstruccionContext)_localctx).opcode = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					((InstruccionContext)_localctx).opcode = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 69;
				((InstruccionContext)_localctx).num_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
					((InstruccionContext)_localctx).num_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 70; Match(NEWLINE);
				}
				break;

			case 2:
				_localctx = new InstruccionCompletaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; Match(LABEL);
				State = 72;
				((InstruccionCompletaContext)_localctx).opcode = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					((InstruccionCompletaContext)_localctx).opcode = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 73;
				((InstruccionCompletaContext)_localctx).num_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
					((InstruccionCompletaContext)_localctx).num_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 74; Match(NEWLINE);
				}
				break;

			case 3:
				_localctx = new InstruccionIndexadaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 75;
				((InstruccionIndexadaContext)_localctx).opcode = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					((InstruccionIndexadaContext)_localctx).opcode = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 76;
				((InstruccionIndexadaContext)_localctx).num_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
					((InstruccionIndexadaContext)_localctx).num_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 77; Match(INDEXED);
				State = 78; Match(NEWLINE);
				}
				break;

			case 4:
				_localctx = new InstruccionIndexadaCompletaContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 79; Match(LABEL);
				State = 80;
				((InstruccionIndexadaCompletaContext)_localctx).opcode = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					((InstruccionIndexadaCompletaContext)_localctx).opcode = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 81;
				((InstruccionIndexadaCompletaContext)_localctx).num_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
					((InstruccionIndexadaCompletaContext)_localctx).num_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 82; Match(INDEXED);
				State = 83; Match(NEWLINE);
				}
				break;

			case 5:
				_localctx = new InstruccionRsubContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 84; Match(T__27);
				State = 85; Match(NEWLINE);
				}
				break;

			case 6:
				_localctx = new InstruccionRsubCompletaContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 86; Match(LABEL);
				State = 87; Match(T__27);
				State = 88; Match(NEWLINE);
				}
				break;

			case 7:
				_localctx = new DirectivaCompletaContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 89; Match(LABEL);
				State = 90;
				((DirectivaCompletaContext)_localctx).directive = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
					((DirectivaCompletaContext)_localctx).directive = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 91;
				((DirectivaCompletaContext)_localctx).num_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX))) != 0)) ) {
					((DirectivaCompletaContext)_localctx).num_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 92; Match(NEWLINE);
				}
				break;

			case 8:
				_localctx = new DirectivaContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 93;
				((DirectivaContext)_localctx).directive = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
					((DirectivaContext)_localctx).directive = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 94;
				((DirectivaContext)_localctx).num_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX))) != 0)) ) {
					((DirectivaContext)_localctx).num_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 95; Match(NEWLINE);
				}
				break;

			case 9:
				_localctx = new InstruccionRsubInvalidaContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 96; Match(T__27);
				State = 98;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 97;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 100;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0) );
				State = 102; Match(NEWLINE);
				}
				break;

			case 10:
				_localctx = new DirectivaInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 103; Match(LABEL);
				State = 104;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 105;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
				break;

			case 11:
				_localctx = new DirectivaInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 106; Match(LABEL);
				State = 107;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 108;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 110;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 109;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 112;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0) );
				State = 114; Match(NEWLINE);
				}
				break;

			case 12:
				_localctx = new DirectivaInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 115; Match(LABEL);
				State = 116;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 118;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 117;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 120;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << LABEL) | (1L << INVALID))) != 0) );
				State = 122; Match(NEWLINE);
				}
				break;

			case 13:
				_localctx = new DirectivaInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 123;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 124;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
				break;

			case 14:
				_localctx = new DirectivaInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 125;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 126;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 128;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 127;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 130;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0) );
				State = 132; Match(NEWLINE);
				}
				break;

			case 15:
				_localctx = new DirectivaInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 133;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 134;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 137;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << LABEL) | (1L << INVALID))) != 0) );
				State = 139; Match(NEWLINE);
				}
				break;

			case 16:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 140; Match(LABEL);
				State = 142;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 141;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 144;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0) );
				State = 147;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 146;
					((InstruccionInvalida1Context)_localctx).num_type = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
						((InstruccionInvalida1Context)_localctx).num_type = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 149;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0) );
				State = 152;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 151; Match(T__32);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 154;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 157;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 156;
						((InstruccionInvalida1Context)_localctx).num2_type = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
							((InstruccionInvalida1Context)_localctx).num2_type = _errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 159;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 162;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					State = 161; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 17:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 164; Match(LABEL);
				State = 166;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 165;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 168;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0) );
				State = 171;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 170;
					((InstruccionInvalida1Context)_localctx).num_type = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
						((InstruccionInvalida1Context)_localctx).num_type = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 173;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0) );
				State = 175; Match(T__32);
				State = 177;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					State = 176; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 18:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 180;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 179;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 182;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0) );
				State = 184;
				((InstruccionInvalida1Context)_localctx).num_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
					((InstruccionInvalida1Context)_localctx).num_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 185; Match(INDEXED);
				State = 187;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
				case 1:
					{
					State = 186; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 19:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 190;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 189;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 192;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0) );
				State = 195;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 194;
					((InstruccionInvalida1Context)_localctx).num_type = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
						((InstruccionInvalida1Context)_localctx).num_type = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 197;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0) );
				State = 200;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 199; Match(INDEXED);
					}
					}
					State = 202;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==INDEXED );
				State = 205;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 204;
						((InstruccionInvalida1Context)_localctx).num2_type = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
							((InstruccionInvalida1Context)_localctx).num2_type = _errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 207;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 210;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					State = 209; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 20:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 212; Match(LABEL);
				State = 214;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 213;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 216;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0) );
				State = 219;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 218;
					((InstruccionInvalida1Context)_localctx).num_type = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
						((InstruccionInvalida1Context)_localctx).num_type = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 221;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0) );
				State = 224;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 223; Match(INDEXED);
					}
					}
					State = 226;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==INDEXED );
				State = 229;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 228;
						((InstruccionInvalida1Context)_localctx).num2_type = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
							((InstruccionInvalida1Context)_localctx).num2_type = _errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 231;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 234;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
				case 1:
					{
					State = 233; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 21:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 237;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 236;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 239;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0) );
				State = 241;
				((InstruccionInvalida1Context)_localctx).num_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
					((InstruccionInvalida1Context)_localctx).num_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 242; Match(T__32);
				State = 243;
				((InstruccionInvalida1Context)_localctx).num2_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					((InstruccionInvalida1Context)_localctx).num2_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 245;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					State = 244; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 22:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 248;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 247;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 250;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0) );
				State = 252;
				((InstruccionInvalida1Context)_localctx).num_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
					((InstruccionInvalida1Context)_localctx).num_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 253;
				((InstruccionInvalida1Context)_localctx).num2_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					((InstruccionInvalida1Context)_localctx).num2_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 255;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					State = 254; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 23:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 257;
				((InstruccionInvalida1Context)_localctx).invalid = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					((InstruccionInvalida1Context)_localctx).invalid = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 259;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 258;
					((InstruccionInvalida1Context)_localctx).opcode = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
						((InstruccionInvalida1Context)_localctx).opcode = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 261;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0) );
				State = 263;
				((InstruccionInvalida1Context)_localctx).num_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << LABEL))) != 0)) ) {
					((InstruccionInvalida1Context)_localctx).num_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 264;
				((InstruccionInvalida1Context)_localctx).num2_type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					((InstruccionInvalida1Context)_localctx).num2_type = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 266;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					State = 265; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 24:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 268; Match(LABEL);
				State = 270;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 269;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 272;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 275;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					State = 274; Match(NEWLINE);
					}
					break;
				}
				}
				break;

			case 25:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 278;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 277;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 280;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0) );
				State = 285;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) {
					{
					{
					State = 282;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 287;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 288; Match(NEWLINE);
				}
				break;

			case 26:
				_localctx = new InstruccionInvalida1Context(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 290;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 289;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 292;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << INT) | (1L << HEX) | (1L << CONSTCAD) | (1L << CONSTHEX) | (1L << LABEL) | (1L << INVALID))) != 0) );
				State = 294; Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return vacio_sempred((VacioContext)_localctx, predIndex);

		case 4: return instrs_sempred((InstrsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool vacio_sempred(VacioContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool instrs_sempred(InstrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3-\x12C\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x5"+
		"\x2\x12\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\a\x3\x1E\n\x3\f\x3\xE\x3!\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x5\x4+\n\x4\x3\x5\x3\x5\x3\x5\x5\x5\x30\n\x5\x3\x5\x3\x5"+
		"\x3\x5\x5\x5\x35\n\x5\x5\x5\x37\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6"+
		">\n\x6\f\x6\xE\x6\x41\v\x6\x3\a\x3\a\x5\a\x45\n\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x6\b\x65"+
		"\n\b\r\b\xE\b\x66\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x6\bq\n\b\r"+
		"\b\xE\br\x3\b\x3\b\x3\b\x3\b\x6\by\n\b\r\b\xE\bz\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x6\b\x83\n\b\r\b\xE\b\x84\x3\b\x3\b\x3\b\x6\b\x8A\n\b\r\b\xE\b"+
		"\x8B\x3\b\x3\b\x3\b\x6\b\x91\n\b\r\b\xE\b\x92\x3\b\x6\b\x96\n\b\r\b\xE"+
		"\b\x97\x3\b\x6\b\x9B\n\b\r\b\xE\b\x9C\x3\b\x6\b\xA0\n\b\r\b\xE\b\xA1\x3"+
		"\b\x5\b\xA5\n\b\x3\b\x3\b\x6\b\xA9\n\b\r\b\xE\b\xAA\x3\b\x6\b\xAE\n\b"+
		"\r\b\xE\b\xAF\x3\b\x3\b\x5\b\xB4\n\b\x3\b\x6\b\xB7\n\b\r\b\xE\b\xB8\x3"+
		"\b\x3\b\x3\b\x5\b\xBE\n\b\x3\b\x6\b\xC1\n\b\r\b\xE\b\xC2\x3\b\x6\b\xC6"+
		"\n\b\r\b\xE\b\xC7\x3\b\x6\b\xCB\n\b\r\b\xE\b\xCC\x3\b\x6\b\xD0\n\b\r\b"+
		"\xE\b\xD1\x3\b\x5\b\xD5\n\b\x3\b\x3\b\x6\b\xD9\n\b\r\b\xE\b\xDA\x3\b\x6"+
		"\b\xDE\n\b\r\b\xE\b\xDF\x3\b\x6\b\xE3\n\b\r\b\xE\b\xE4\x3\b\x6\b\xE8\n"+
		"\b\r\b\xE\b\xE9\x3\b\x5\b\xED\n\b\x3\b\x6\b\xF0\n\b\r\b\xE\b\xF1\x3\b"+
		"\x3\b\x3\b\x3\b\x5\b\xF8\n\b\x3\b\x6\b\xFB\n\b\r\b\xE\b\xFC\x3\b\x3\b"+
		"\x3\b\x5\b\x102\n\b\x3\b\x3\b\x6\b\x106\n\b\r\b\xE\b\x107\x3\b\x3\b\x3"+
		"\b\x5\b\x10D\n\b\x3\b\x3\b\x6\b\x111\n\b\r\b\xE\b\x112\x3\b\x5\b\x116"+
		"\n\b\x3\b\x6\b\x119\n\b\r\b\xE\b\x11A\x3\b\a\b\x11E\n\b\f\b\xE\b\x121"+
		"\v\b\x3\b\x3\b\x6\b\x125\n\b\r\b\xE\b\x126\x3\b\x5\b\x12A\n\b\x3\b\x2"+
		"\x2\x4\x4\n\t\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x2\b\x4\x2$%**\x3"+
		"\x2\x5\x1D\x3\x2\x1F\"\x4\x2$%\'(\x6\x2#%\'(**--\x5\x2##**--\x169\x2\x11"+
		"\x3\x2\x2\x2\x4\x18\x3\x2\x2\x2\x6*\x3\x2\x2\x2\b\x36\x3\x2\x2\x2\n\x38"+
		"\x3\x2\x2\x2\f\x44\x3\x2\x2\x2\xE\x129\x3\x2\x2\x2\x10\x12\x5\x4\x3\x2"+
		"\x11\x10\x3\x2\x2\x2\x11\x12\x3\x2\x2\x2\x12\x13\x3\x2\x2\x2\x13\x14\x5"+
		"\x6\x4\x2\x14\x15\x5\n\x6\x2\x15\x16\x5\b\x5\x2\x16\x17\a\x2\x2\x3\x17"+
		"\x3\x3\x2\x2\x2\x18\x19\b\x3\x1\x2\x19\x1A\a+\x2\x2\x1A\x1F\x3\x2\x2\x2"+
		"\x1B\x1C\f\x4\x2\x2\x1C\x1E\a+\x2\x2\x1D\x1B\x3\x2\x2\x2\x1E!\x3\x2\x2"+
		"\x2\x1F\x1D\x3\x2\x2\x2\x1F \x3\x2\x2\x2 \x5\x3\x2\x2\x2!\x1F\x3\x2\x2"+
		"\x2\"#\a*\x2\x2#$\a\x3\x2\x2$%\a$\x2\x2%+\a+\x2\x2&\'\a*\x2\x2\'(\a\x3"+
		"\x2\x2()\a%\x2\x2)+\a+\x2\x2*\"\x3\x2\x2\x2*&\x3\x2\x2\x2+\a\x3\x2\x2"+
		"\x2,-\a*\x2\x2-/\a\x4\x2\x2.\x30\t\x2\x2\x2/.\x3\x2\x2\x2/\x30\x3\x2\x2"+
		"\x2\x30\x31\x3\x2\x2\x2\x31\x37\a+\x2\x2\x32\x34\a\x4\x2\x2\x33\x35\t"+
		"\x2\x2\x2\x34\x33\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x37\x3\x2\x2\x2"+
		"\x36,\x3\x2\x2\x2\x36\x32\x3\x2\x2\x2\x37\t\x3\x2\x2\x2\x38\x39\b\x6\x1"+
		"\x2\x39:\x5\f\a\x2:?\x3\x2\x2\x2;<\f\x4\x2\x2<>\x5\f\a\x2=;\x3\x2\x2\x2"+
		">\x41\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\v\x3\x2\x2\x2\x41?\x3\x2"+
		"\x2\x2\x42\x45\x5\xE\b\x2\x43\x45\a+\x2\x2\x44\x42\x3\x2\x2\x2\x44\x43"+
		"\x3\x2\x2\x2\x45\r\x3\x2\x2\x2\x46G\t\x3\x2\x2GH\t\x2\x2\x2H\x12A\a+\x2"+
		"\x2IJ\a*\x2\x2JK\t\x3\x2\x2KL\t\x2\x2\x2L\x12A\a+\x2\x2MN\t\x3\x2\x2N"+
		"O\t\x2\x2\x2OP\a)\x2\x2P\x12A\a+\x2\x2QR\a*\x2\x2RS\t\x3\x2\x2ST\t\x2"+
		"\x2\x2TU\a)\x2\x2U\x12A\a+\x2\x2VW\a\x1E\x2\x2W\x12A\a+\x2\x2XY\a*\x2"+
		"\x2YZ\a\x1E\x2\x2Z\x12A\a+\x2\x2[\\\a*\x2\x2\\]\t\x4\x2\x2]^\t\x5\x2\x2"+
		"^\x12A\a+\x2\x2_`\t\x4\x2\x2`\x61\t\x5\x2\x2\x61\x12A\a+\x2\x2\x62\x64"+
		"\a\x1E\x2\x2\x63\x65\t\x6\x2\x2\x64\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2"+
		"\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gh\x3\x2\x2\x2h\x12A\a+\x2\x2ij\a"+
		"*\x2\x2jk\t\x4\x2\x2k\x12A\t\x5\x2\x2lm\a*\x2\x2mn\t\x4\x2\x2np\t\x5\x2"+
		"\x2oq\t\x6\x2\x2po\x3\x2\x2\x2qr\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2"+
		"\x2st\x3\x2\x2\x2t\x12A\a+\x2\x2uv\a*\x2\x2vx\t\x4\x2\x2wy\t\a\x2\x2x"+
		"w\x3\x2\x2\x2yz\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x3\x2\x2\x2"+
		"|\x12A\a+\x2\x2}~\t\x4\x2\x2~\x12A\t\x5\x2\x2\x7F\x80\t\x4\x2\x2\x80\x82"+
		"\t\x5\x2\x2\x81\x83\t\x6\x2\x2\x82\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2"+
		"\x84\x82\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x12A"+
		"\a+\x2\x2\x87\x89\t\x4\x2\x2\x88\x8A\t\a\x2\x2\x89\x88\x3\x2\x2\x2\x8A"+
		"\x8B\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\x3\x2"+
		"\x2\x2\x8D\x12A\a+\x2\x2\x8E\x90\a*\x2\x2\x8F\x91\t\x3\x2\x2\x90\x8F\x3"+
		"\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2"+
		"\x93\x95\x3\x2\x2\x2\x94\x96\t\x2\x2\x2\x95\x94\x3\x2\x2\x2\x96\x97\x3"+
		"\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x9A\x3\x2\x2\x2"+
		"\x99\x9B\a#\x2\x2\x9A\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9A\x3\x2"+
		"\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9F\x3\x2\x2\x2\x9E\xA0\t\x6\x2\x2\x9F"+
		"\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2"+
		"\x2\x2\xA2\xA4\x3\x2\x2\x2\xA3\xA5\a+\x2\x2\xA4\xA3\x3\x2\x2\x2\xA4\xA5"+
		"\x3\x2\x2\x2\xA5\x12A\x3\x2\x2\x2\xA6\xA8\a*\x2\x2\xA7\xA9\t\x3\x2\x2"+
		"\xA8\xA7\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3"+
		"\x2\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xAE\t\x2\x2\x2\xAD\xAC\x3\x2\x2\x2\xAE"+
		"\xAF\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2"+
		"\x2\x2\xB1\xB3\a#\x2\x2\xB2\xB4\a+\x2\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3"+
		"\x2\x2\x2\xB4\x12A\x3\x2\x2\x2\xB5\xB7\t\x3\x2\x2\xB6\xB5\x3\x2\x2\x2"+
		"\xB7\xB8\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\x3"+
		"\x2\x2\x2\xBA\xBB\t\x2\x2\x2\xBB\xBD\a)\x2\x2\xBC\xBE\a+\x2\x2\xBD\xBC"+
		"\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\x12A\x3\x2\x2\x2\xBF\xC1\t\x3\x2"+
		"\x2\xC0\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3"+
		"\x3\x2\x2\x2\xC3\xC5\x3\x2\x2\x2\xC4\xC6\t\x2\x2\x2\xC5\xC4\x3\x2\x2\x2"+
		"\xC6\xC7\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xCA\x3"+
		"\x2\x2\x2\xC9\xCB\a)\x2\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC"+
		"\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCF\x3\x2\x2\x2\xCE\xD0\t\x6"+
		"\x2\x2\xCF\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1"+
		"\xD2\x3\x2\x2\x2\xD2\xD4\x3\x2\x2\x2\xD3\xD5\a+\x2\x2\xD4\xD3\x3\x2\x2"+
		"\x2\xD4\xD5\x3\x2\x2\x2\xD5\x12A\x3\x2\x2\x2\xD6\xD8\a*\x2\x2\xD7\xD9"+
		"\t\x3\x2\x2\xD8\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2"+
		"\xDA\xDB\x3\x2\x2\x2\xDB\xDD\x3\x2\x2\x2\xDC\xDE\t\x2\x2\x2\xDD\xDC\x3"+
		"\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2"+
		"\xE0\xE2\x3\x2\x2\x2\xE1\xE3\a)\x2\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2"+
		"\x2\x2\xE4\xE2\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6"+
		"\xE8\t\x6\x2\x2\xE7\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xE7\x3\x2"+
		"\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEC\x3\x2\x2\x2\xEB\xED\a+\x2\x2\xEC\xEB"+
		"\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\x12A\x3\x2\x2\x2\xEE\xF0\t\x3\x2"+
		"\x2\xEF\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF1\xF2"+
		"\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4\t\x2\x2\x2\xF4\xF5\a#\x2\x2\xF5"+
		"\xF7\t\x6\x2\x2\xF6\xF8\a+\x2\x2\xF7\xF6\x3\x2\x2\x2\xF7\xF8\x3\x2\x2"+
		"\x2\xF8\x12A\x3\x2\x2\x2\xF9\xFB\t\x3\x2\x2\xFA\xF9\x3\x2\x2\x2\xFB\xFC"+
		"\x3\x2\x2\x2\xFC\xFA\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFE\x3\x2\x2"+
		"\x2\xFE\xFF\t\x2\x2\x2\xFF\x101\t\x6\x2\x2\x100\x102\a+\x2\x2\x101\x100"+
		"\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x12A\x3\x2\x2\x2\x103\x105\t\x6"+
		"\x2\x2\x104\x106\t\x3\x2\x2\x105\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2"+
		"\x107\x105\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109"+
		"\x10A\t\x2\x2\x2\x10A\x10C\t\x6\x2\x2\x10B\x10D\a+\x2\x2\x10C\x10B\x3"+
		"\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x12A\x3\x2\x2\x2\x10E\x110\a*\x2"+
		"\x2\x10F\x111\t\x3\x2\x2\x110\x10F\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112"+
		"\x110\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113\x115\x3\x2\x2\x2\x114\x116"+
		"\a+\x2\x2\x115\x114\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x12A\x3\x2"+
		"\x2\x2\x117\x119\t\x3\x2\x2\x118\x117\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2"+
		"\x11A\x118\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x11F\x3\x2\x2\x2\x11C"+
		"\x11E\t\x6\x2\x2\x11D\x11C\x3\x2\x2\x2\x11E\x121\x3\x2\x2\x2\x11F\x11D"+
		"\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x122\x3\x2\x2\x2\x121\x11F\x3"+
		"\x2\x2\x2\x122\x12A\a+\x2\x2\x123\x125\t\x6\x2\x2\x124\x123\x3\x2\x2\x2"+
		"\x125\x126\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127"+
		"\x128\x3\x2\x2\x2\x128\x12A\a+\x2\x2\x129\x46\x3\x2\x2\x2\x129I\x3\x2"+
		"\x2\x2\x129M\x3\x2\x2\x2\x129Q\x3\x2\x2\x2\x129V\x3\x2\x2\x2\x129X\x3"+
		"\x2\x2\x2\x129[\x3\x2\x2\x2\x129_\x3\x2\x2\x2\x129\x62\x3\x2\x2\x2\x129"+
		"i\x3\x2\x2\x2\x129l\x3\x2\x2\x2\x129u\x3\x2\x2\x2\x129}\x3\x2\x2\x2\x129"+
		"\x7F\x3\x2\x2\x2\x129\x87\x3\x2\x2\x2\x129\x8E\x3\x2\x2\x2\x129\xA6\x3"+
		"\x2\x2\x2\x129\xB6\x3\x2\x2\x2\x129\xC0\x3\x2\x2\x2\x129\xD6\x3\x2\x2"+
		"\x2\x129\xEF\x3\x2\x2\x2\x129\xFA\x3\x2\x2\x2\x129\x103\x3\x2\x2\x2\x129"+
		"\x10E\x3\x2\x2\x2\x129\x118\x3\x2\x2\x2\x129\x124\x3\x2\x2\x2\x12A\xF"+
		"\x3\x2\x2\x2/\x11\x1F*/\x34\x36?\x44\x66rz\x84\x8B\x92\x97\x9C\xA1\xA4"+
		"\xAA\xAF\xB3\xB8\xBD\xC2\xC7\xCC\xD1\xD4\xDA\xDF\xE4\xE9\xEC\xF1\xF7\xFC"+
		"\x101\x107\x10C\x112\x115\x11A\x11F\x126\x129";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace sic_asm
